{"version":3,"sources":["../../../../src/server/auth/controllers/AuthController.js"],"names":["AuthController","req","res","nome","email","un","body","username","up","password","cripto","createHash","update","digest","User","find","verified","err","r","length","message","json","Erro","p","nivel","session","token","jwt","sign","pk","expiresIn","success","end","a","user","save","headers","verify","decoded","id","params","userId","findByIdAndUpdate","status","send","error","tokenVerify"],"mappings":"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","file":"AuthController.js","sourcesContent":["import cripto from 'crypto';\r\nimport jwt from 'jsonwebtoken';\r\nimport User from '../models/AuthModel';\r\nimport pk from '../../pk';\r\n\r\nexport default class AuthController {\r\n    static Erro(err) {\r\n        return {\r\n            success: false,\r\n            error: err\r\n        }\r\n    }\r\n\r\n    login() {\r\n        return (req, res) => {\r\n            let nome = '';\r\n            let email = '';\r\n            let un = '';\r\n            if (req.body.username) {\r\n                un = req.body.username;\r\n            }\r\n            let up = '';\r\n            if (req.body.password) {\r\n                up = cripto.createHash('sha256').update(req.body.password).digest('hex');\r\n            }\r\n\r\n            User.find({username: un, password: up, verified: true}, (err, r) => {\r\n                if (err || r.length !== 1) {\r\n                    if (!err) {\r\n                        err = {message: 'Usuario ou senha incorretos!'};\r\n                    }\r\n                    res.json(AuthController.Erro(err));\r\n                } else {\r\n                    if (r[0].verified) {\r\n                        if (r[0].nome) {\r\n                            nome = r[0].nome;\r\n                        }\r\n\r\n                        if (r[0].email) {\r\n                            email = r[0].email;\r\n                        }\r\n\r\n                        const p = {\r\n                            nome: nome,\r\n                            email: email,\r\n                            username: un,\r\n                            password: up,\r\n                            nivel: r[0].nivel\r\n                        };\r\n\r\n                        req.session.token = jwt.sign(p, pk.pk, {expiresIn: '7d'});\r\n                        res.json({success: true, message: 'Token criado!!'});\r\n                        res.end();\r\n                    } else {\r\n                        if (!err) {\r\n                            err = {message: 'Usuario ou senha incorretos!'};\r\n                        }\r\n                        res.json(AuthController.Erro(err));\r\n                    }\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    register() {\r\n        return (req, res) => {\r\n            if (req.body.nome === '' && req.body.email === '' && req.body.username === '' && req.body.password === '' && req.body.nivel === '') {\r\n                res.json({success: false, message: 'Algum campo estÃ¡ faltando!'});\r\n                return;\r\n            }\r\n\r\n            const nome = req.body.nome;\r\n            const email = req.body.email;\r\n            const username = req.body.username;\r\n            const password = cripto.createHash('sha256').update(req.body.password).digest('hex');\r\n            const nivel = req.body.nivel;\r\n\r\n            const a = {nome: nome, email: email, username: username, password: password, nivel: nivel};\r\n\r\n            const user = new User(a);\r\n            user.save((err) => {\r\n                if (err) {\r\n                    res.json(AuthController.Erro(err));\r\n                } else {\r\n                    res.json({success: true, message: 'Usuario criado!'});\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    verify() {\r\n        return (req, res) => {\r\n            const token = req.headers['x-access-token'];\r\n            if (token) {\r\n                jwt.verify(token, pk.pk, (err, decoded) => {\r\n                    if (err) {\r\n                        res.json({success: false, message: 'Falha ao tentar autenticar o token!'});\r\n                        return;\r\n                    }\r\n\r\n                    if (decoded.nivel < 2) {\r\n                        res.json({success: false, message: 'Nivel de acesso insuficiente!'});\r\n                        return;\r\n                    }\r\n\r\n                    const id = req.params.userId;\r\n                    User.findByIdAndUpdate(id, {verified: true}, (err) => {\r\n                        if (err) {\r\n                            res.json(AuthController.Erro(err));\r\n                        } else {\r\n                            res.json({success: true, message: 'Modificado com sucesso!'});\r\n                        }\r\n                    })\r\n                });\r\n            } else {\r\n                return res.status(403).send({\r\n                    success: false,\r\n                    message: '403 - Forbidden'\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    static status() {\r\n        function tokenVerify(token) {\r\n            jwt.verify(token, pk.pk, (err) => {\r\n                return !err;\r\n            });\r\n        }\r\n\r\n        return (req, res) => {\r\n            if (req.session) {\r\n                if (req.session.token) {\r\n                    const token = req.session.token;\r\n                    if (tokenVerify(token)) {\r\n                        res.json({success: true});\r\n                    } else {\r\n                        res.json({success: false});\r\n                    }\r\n                } else {\r\n                    res.json({success: false});\r\n                }\r\n            } else {\r\n                res.json({success: false});\r\n            }\r\n        };\r\n    }\r\n}"]}
{"version":3,"sources":["../../../src/server/api/Api.js"],"names":["router","express","Router","use","bodyParser","json","urlencoded","extended","req","res","next","token","session","jwt","verify","pk","err","decoded","success","message","status","send","todoRouter","licencaRouter"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEAF,OAAOG,GAAP,CAAWC,qBAAWC,IAAX,EAAX;AACAL,OAAOG,GAAP,CAAWC,qBAAWE,UAAX,CAAsB,EAACC,UAAU,KAAX,EAAtB,CAAX;;AAEAP,OAAOG,GAAP,CAAW,UAACK,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC3B,QAAMC,QAAQH,IAAII,OAAJ,CAAYD,KAA1B;AACA,QAAIA,KAAJ,EAAW;AACPE,+BAAIC,MAAJ,CAAWH,KAAX,EAAkBI,aAAGA,EAArB,EAAyB,UAACC,GAAD,EAAMC,OAAN,EAAkB;AACvC,gBAAID,GAAJ,EAAS;AACLP,oBAAIJ,IAAJ,CAAS,EAACa,SAAS,KAAV,EAAiBC,SAAS,qCAA1B,EAAT;AACH;AACDX,gBAAIS,OAAJ,GAAcA,OAAd;AACAP;AACH,SAND;AAOH,KARD,MAQO;AACH,eAAOD,IAAIW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBH,qBAAS,KADe;AAExBC,qBAAS;AAFe,SAArB,CAAP;AAIH;AACJ,CAhBD;;AAkBAnB,OAAOG,GAAP,CAAW,QAAX,EAAqBmB,oBAArB;AACAtB,OAAOG,GAAP,CAAW,WAAX,EAAwBoB,uBAAxB;;AAEAvB,OAAOG,GAAP,CAAW,UAACK,GAAD,EAAMC,GAAN,EAAc;AACrBA,QAAIJ,IAAJ,CAAS,EAACa,SAAS,KAAV,EAAiBC,SAAS,8BAA1B,EAAT;AACH,CAFD;;kBAIenB,M","file":"Api.js","sourcesContent":["import express from 'express';\r\nimport todoRouter from './routes/TodoRouter';\r\nimport licencaRouter from './routes/LicencaRouter';\r\nimport bodyParser from \"body-parser\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport pk from \"../pk\";\r\n\r\nconst router = express.Router();\r\n\r\nrouter.use(bodyParser.json());\r\nrouter.use(bodyParser.urlencoded({extended: false}));\r\n\r\nrouter.use((req, res, next) => {\r\n    const token = req.session.token;\r\n    if (token) {\r\n        jwt.verify(token, pk.pk, (err, decoded) => {\r\n            if (err) {\r\n                res.json({success: false, message: 'Falha ao tentar autenticar o token!'});\r\n            }\r\n            req.decoded = decoded;\r\n            next();\r\n        });\r\n    } else {\r\n        return res.status(403).send({\r\n            success: false,\r\n            message: '403 - Forbidden'\r\n        });\r\n    }\r\n});\r\n\r\nrouter.use('/tasks', todoRouter);\r\nrouter.use('/licencas', licencaRouter);\r\n\r\nrouter.use((req, res) => {\r\n    res.json({success: false, message: 'NÃ£o sabemos o que aconteceu.'})\r\n});\r\n\r\nexport default router;"]}